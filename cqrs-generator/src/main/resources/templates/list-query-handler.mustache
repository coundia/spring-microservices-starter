package {{package}};

{{#imports}}
	import {{.}};
{{/imports}}

@Component
public class List{{entity}}sQueryHandler {

private final {{entity}}Repository {{entityLower}}Repository;

public List{{entity}}sQueryHandler({{entity}}Repository {{entityLower}}Repository) {
this.{{entityLower}}Repository = {{entityLower}}Repository;
}

@QueryHandler
public Mono<List{{entity}}ResponseDTO> handle(List{{entity}}sQuery query) {
	int limit = (int) query.getLimit();
	int offset = (int) (query.getPage() * query.getLimit());
	Mono<Long> totalElements = {{entityLower}}Repository.findAll().count();
		Mono<List<{{entity}}>> items = {{entityLower}}Repository.findAllByPage(limit, offset).collectList();
		return Mono.zip(items, totalElements)
		.map(tuple -> List{{entity}}ResponseDTO.from(tuple.getT1(), query.getPage(), query.getLimit(), tuple.getT2()));
		}
		}
